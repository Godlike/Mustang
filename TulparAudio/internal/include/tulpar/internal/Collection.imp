/*
* Copyright (C) 2018 by Godlike
* This code is licensed under the MIT license (MIT)
* (http://opensource.org/licenses/MIT)
*/

namespace tulpar
{
namespace internal
{

template<typename T>
    Collection<T>::Collection()
        : m_batchSize(1)
    {

    }

template<typename T>
    void Collection<T>::Initialize(uint32_t batchSize)
{
        m_batchSize = batchSize;

        GenerateHandles(batchSize);
    }

template<typename T>
    T Collection<T>::Get(typename T::Handle handle) const
{
        return *GenerateObject(handle);
    }

template<typename T>
    bool Collection<T>::IsValid(typename T::Handle handle) const
{
        return m_sources.cend() != m_sources.find(handle);
    }

template<typename T>
    T Collection<T>::Spawn()
{
        if (m_available.empty())
        {
            GenerateHandles(m_batchSize);
        }

        typename T::Handle handle = m_available.front();

        m_available.pop();
        m_used.push_back(handle);

        T* pObject = CreateObject(handle);

        m_sources[handle] = pObject;

        return *pObject;
    }

template<typename T>
    void Collection<T>::Reclaim(typename T::Handle handle)
{
        auto usedIt = std::find(m_used.begin(), m_used.end(), handle);

        assert(m_used.cend() != usedIt);

        m_used.erase(usedIt);
        m_available.push(handle);
        m_sources.erase(handle);
    }

}
}
